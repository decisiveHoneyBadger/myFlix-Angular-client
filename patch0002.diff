From 2feb4604b261638a5efa51373bebcbec0e4188fc Mon Sep 17 00:00:00 2001
From: decisiveHoneyBadger <k.guevenc@web.de>
Date: Sat, 13 Aug 2022 16:34:44 +0200
Subject: [PATCH] implemented the logic for API endpoints and included
 HttpClientModule for server communication

---
 angular.json                           |   3 +
 src/app/app.module.ts                  |   2 +
 src/app/fetch-api-data.service.spec.ts |  16 +++
 src/app/fetch-api-data.service.ts      | 174 +++++++++++++++++++++++++
 4 files changed, 195 insertions(+)
 create mode 100644 src/app/fetch-api-data.service.spec.ts
 create mode 100644 src/app/fetch-api-data.service.ts

diff --git a/angular.json b/angular.json
index 6dea449..2cc58c2 100644
--- a/angular.json
+++ b/angular.json
@@ -103,5 +103,8 @@
         }
       }
     }
+  },
+  "cli": {
+    "analytics": false
   }
 }
diff --git a/src/app/app.module.ts b/src/app/app.module.ts
index b1c6c96..e9a884a 100644
--- a/src/app/app.module.ts
+++ b/src/app/app.module.ts
@@ -1,5 +1,6 @@
 import { NgModule } from '@angular/core';
 import { BrowserModule } from '@angular/platform-browser';
+import { HttpClientModule } from '@angular/common/http';
 
 import { AppRoutingModule } from './app-routing.module';
 import { AppComponent } from './app.component';
@@ -10,6 +11,7 @@ import { AppComponent } from './app.component';
   ],
   imports: [
     BrowserModule,
+    HttpClientModule,
     AppRoutingModule
   ],
   providers: [],
diff --git a/src/app/fetch-api-data.service.spec.ts b/src/app/fetch-api-data.service.spec.ts
new file mode 100644
index 0000000..b55d391
--- /dev/null
+++ b/src/app/fetch-api-data.service.spec.ts
@@ -0,0 +1,16 @@
+import { TestBed } from '@angular/core/testing';
+
+import { FetchApiDataService } from './fetch-api-data.service';
+
+describe('FetchApiDataService', () => {
+  let service: FetchApiDataService;
+
+  beforeEach(() => {
+    TestBed.configureTestingModule({});
+    service = TestBed.inject(FetchApiDataService);
+  });
+
+  it('should be created', () => {
+    expect(service).toBeTruthy();
+  });
+});
diff --git a/src/app/fetch-api-data.service.ts b/src/app/fetch-api-data.service.ts
new file mode 100644
index 0000000..5a0dbbe
--- /dev/null
+++ b/src/app/fetch-api-data.service.ts
@@ -0,0 +1,174 @@
+import { Injectable } from '@angular/core';
+import { catchError } from 'rxjs/internal/operators';
+import { HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';
+import { Observable, throwError } from 'rxjs';
+import { map } from 'rxjs/operators';
+
+const token = localStorage.getItem('token');
+// Get username from localStorage for URLs
+const username = localStorage.getItem('username');
+
+//Declaring the api url that will provide data for the client app
+const apiUrl = 'YOUR_HOSTED_API_URL_HERE/';
+@Injectable({
+  providedIn: 'root'
+})
+export class UserRegistrationService {
+  // Inject the HttpClient module to the constructor params
+ // This will provide HttpClient to the entire class, making it available via this.http
+  constructor(private http: HttpClient) {
+  }
+ // Making the api call for the user registration endpoint
+  // public userRegistration(userDetails: any): Observable<any> {
+  //   console.log(userDetails);
+  //   return this.http.post(apiUrl + 'users', userDetails).pipe(
+  //   catchError(this.handleError)
+  //   );
+  // }
+
+  // Making the api call for the user registration endpoint
+  public userRegistration(userDetails: any): Observable<any> {
+    console.log(userDetails);
+    return this.http
+      .post(apiUrl + 'users', userDetails)
+      .pipe(
+        catchError(this.handleError)
+      );
+  }
+
+    // API call to user login endpoint
+  public userLogin(userCredentials: any): Observable<any> {
+    console.log(userCredentials);
+    return this.http
+      .post(apiUrl + 'login', userCredentials)
+      .pipe(catchError(this.handleError));
+  }
+
+ 
+  //  API call to get one movie endpoint
+  getSingleMovie(title: any): Observable<any> {
+   
+    return this.http
+      .get(apiUrl + `movies/${title}`, {
+        headers: new HttpHeaders({
+          Authorization: 'Bearer ' + token,
+        })
+      })
+      .pipe(
+        map(this.extractResponseData),
+        catchError(this.handleError)
+      );
+  }
+
+  // API call to get data on one director
+  getDirector(name: any): Observable<any> {
+   
+    return this.http
+      .get(apiUrl + `movies/director/${name}`, {
+        headers: new HttpHeaders({
+          Authorization: 'Bearer ' + token,
+        })
+      })
+      .pipe(
+        map(this.extractResponseData),
+        catchError(this.handleError)
+      );
+  }
+
+// API call to genre endpoint
+// Get Genre
+getGenre(): Observable<any> {
+  
+  return this.http
+    .get( apiUrl + 'genre', {
+      headers: new HttpHeaders({
+        Authorization: 'Bearer ' + token,
+      })
+    })
+    .pipe(
+      map(this.extractResponseData),
+      catchError(this.handleError)
+    );
+}
+  
+  // API call to user data endpoint
+  // API call to get favortie movies of a user endpoint
+  getUser(username: any): Observable<any> {
+ 
+    return this.http
+      .get(apiUrl + 'users/' + username, {
+        headers: new HttpHeaders({
+          Authorization: 'Bearer ' + token,
+        })
+      })
+      .pipe(
+        map(this.extractResponseData),
+        catchError(this.handleError)
+      );
+  }
+
+    // API call to add a favorite movie to user endpoint
+  addFavoriteMovie( movieId: any): Observable<any> {
+  
+    return this.http
+      .post(apiUrl + `users/${username}/favorites/${movieId}`,{},   {
+        headers: new HttpHeaders({
+          Authorization: `Bearer ${token}`,
+        })
+      })
+      .pipe(
+        map(this.extractResponseData),
+        catchError(this.handleError)
+      );
+  }
+
+  // API call to delete a movie from the users favorites list
+  removeFavoriteMovie(movieID: any): Observable<any> {
+  
+    return this.http
+      .delete(apiUrl + `users/${username}/movies/${movieID}`, {
+        headers: new HttpHeaders({
+          Authorization: 'Bearer ' + token,
+        })
+      })
+      .pipe(
+        map(this.extractResponseData),
+        catchError(this.handleError)
+      );
+  }
+
+    // API call to edit user information endpoint
+editUser(updateDetails: any): Observable<any> {
+   
+    return this.http
+      .put(apiUrl + `users/${username}`, updateDetails, {
+        headers: new HttpHeaders({
+          Authorization: 'Bearer ' + token,
+        })
+      })
+      .pipe(
+        map(this.extractResponseData),
+        catchError(this.handleError)
+      );
+  }
+
+
+    private extractResponseData(res: any): any {
+    const body = res;
+    return body || {};
+  }
+
+
+
+private handleError(error: HttpErrorResponse): any {
+    if (error.error instanceof ErrorEvent) {
+    console.error('Some error occurred:', error.error.message);
+    } else {
+    console.error(
+        `Error Status code ${error.status}, ` +
+        `Error body is: ${error.error}`);
+    }
+    return throwError(
+    'Something bad happened; please try again later.');
+  }
+}
-- 
2.31.0

